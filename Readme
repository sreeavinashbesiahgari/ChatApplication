A chat application has two components: a chat server and chat clients. A chat server is an
application program that maintains the user account information, and facilitate the chat
functionality. A chat client is an application program that can send either broadcast or targeted
messages to other clients.


A user can perform the following four operations in chat_client:
1. quit the client program using command "exit". If a TCP connection is open, the client
should close the connection before exiting the program. The "exit" command is only
issued when the user has logged out from the server (see below for login and logout
commands).
2. log into the server using command "login" in the format of "login username". In this
project, we do not consider user password, and we also assume that no two users will
give the same username when they log in. After receiving the login command, the
server will simply maintain some proper information for the username, in particular, the
socket connection information for the username, so that later it can properly forward
messages to this username.
3. log out from the server, in the format "logout". The server will remove the socket
connection information for the corresponding client after it receives the logout
command. After the logout command is sent to the server, the user will have the same
interface as when the client program first starts. That is, the user can issue two
commands "login" to log into the server, and "exit" to quit the client program.
4. send a chat message in the format of "chat [@username] some_message", where
@username is optional parameter of the chat command. If @username is not present in
the command, the corresponding some_message is a broadcast message, the server
should forward the message to all the users who are currently logged in. If @username
is present in the chat command, the some_message should only be forwarded to the
corresponding "username". Note that "chat" command can only be issued after the user
has logged into the server.



To use this project use : 

step 1: 

 scl enable devtoolset-11 bash

step 2:

make all 

step 3:
Run server in terminal 1

server server.conf

step 4: 

Login as A in terminal 2

client client.conf 
>> login A

step 5:

Login as B in terminal 3 

client client.conf 
>>login B

now you can chat with A : shown below

>>chat @A hi


>>Logout 
: To logout as user

>>exit : To Exit 


The pthread library is employed in the following applications:

Using pthread_create(), two threads are generated in the ChatClient::handle_messenger_() method. One thread receives messages from the server, while the other thread sends messages to the server. The receive_wrapper() function and the ChatClient::send() method are used to construct these threads.
In the ChatClient::handle_messenger_() method, the pthread_attr_t structure is used to set thread properties such as the thread's detach state.
In the ChatClient::handle_messenger_() method, the pthread_join() function is used to wait for the threads generated with pthread_create() to terminate.

select() is used to monitor file descriptors for I/O events.
In this code, select() is used to wait for messages to be received from the server on the client's socket file descriptor (cfd).The select() function takes five arguments:max_fd+1: the highest file descriptor in the set plus one.
readmessages_fds: a pointer to a set of file descriptors to be monitored for incoming data to be read.
The return value of select() is the number of file descriptors that are ready for I/O, or -1 on error.









